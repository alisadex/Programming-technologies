/**
 * Этот класс представляет собой один шаг в пути, сгенерированном алгоритмом поиска пути A*.
 * Путевые точки состоят из местоположения, предыдущей путевой точки на пути
 * и некоторых значений затрат, используемых для определения наилучшего пути.
 **/
package com.company;
public class Waypoint
{
    /** Местоположение этой путевой точки. **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути или  <code>null</code> если это корень поиска A*.
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость проезда от исходного местоположения до
     * этой путевой точки по цепочке путевых точек. Это фактическая стоимость
     * прохождения пути; она не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости проезда от
     * этой путевой точки до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     * Создайте новую путевую точку для указанного местоположения.
     * Необязательно может быть указана предыдущая путевая точка, или ссылка может быть <code>null</code>,
     * чтобы указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation()
    {
        return loc;
    }

    /**
     * Возвращает предыдущую путевую точку в пути или  <code>null</code>,
     * если это начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }

    /**
     *Этот мутатор позволяет установить как предыдущую стоимость,
     *так и оставшуюся стоимость в одном вызове метода.
     *Обычно эти значения устанавливаются на одном и том же уровне
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость проезда до этой точки из
     * исходного местоположения через ряд путевых точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости проезда от этой
     * точки до конечного пункта назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Возвращает общую смету затрат для этой путевой точки.
     * Это включает в себя фактическую стоимость проезда до этой точки из исходного местоположения,
     * плюс оценку оставшейся стоимости проезда от этой точки до конечного пункта назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}
